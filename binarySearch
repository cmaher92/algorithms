# Binary search

# Notes:
# Psuedocode is preferred while discussing algorithms because of the variance in languages
#

var primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 27, 41, 43, 47, 53, 59, 6, 1, 67, 71, 73, 79, 83, 89, 97]
target = 31

correct = "We have found the target"

# array primes contains 25 numbers
# 0 represents the smallest index of the list
min = 0
# max represents the largest index of the list
max = 24

# Let min = 0 and max = n-1.
# Compute guess as the average of max and min, rounded down (so that it is an integer).
# If array[guess] equals target, then stop. You found it! Return guess.
# If the guess was too low, that is, array[guess] < target, then set min = guess + 1.
# Otherwise, the guess was too high. Set max = guess - 1.
# Go back to step 2.
# https://www.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array


# Implementation
def binarySearch(primes):
    n = len(primes)
    min = 0
    max = n-1
    guess = min + max // 2
    if primes[guess] == target:
        print(correct)
        print(guess)
    elif primes[guess] < target:
        print("guess was too low")
        min = guess + 1
    else:
        print("guess was to high")
        max = guess - 1
